<?php
define('GBIF_ECAT_BASE_URL', 'http://ecat-dev.gbif.org/ws/');

/**
 * Implementation of hook_menu().
 */
function gbif_ecat_menu(){
  return array(
    'admin/structure/taxonomy/gbif_ecat-import' => array(
      'title' => 'GBIF Checklist Bank Import',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'gbif_ecat_import_form'
      ),
      'access arguments' => array(
        'administer taxonomy'
      )
    )
  );
}

/**
 * Implements hook_silver().
 */
function gbif_ecat_silver(){
  return array(
    array(
      'type' => 'Taxonomy',
      'name' => 'GBIF Checklist Bank web service',
      //'access callback' => 'user_access',
      'access arguments' => array(
        'create page content' // FIXME
      ),
      'form_id' => 'gbif_ecat_import_form'
    )
  );
}

/**
 * Callback to produce the import form for gbif_ecat.
 */
function gbif_ecat_import_form($form, &$form_state){
  // Create a soap client to ensure that the service is up.
  $request = drupal_http_request(GBIF_ECAT_BASE_URL, array(
    'timeout' => 3
  ));
  $gbif_ecat_service_status = $request->code == 200;
  $vocabularies = taxonomy_get_vocabularies();
  $taxonomies = array(
    '- SELECT VOCABULARY -'
  );
  foreach($vocabularies as $vid => $vocabulary){
    $taxonomies[$vid] = $vocabulary->name;
  }
  return array(
    '#action' => url('admin/structure/taxonomy/gbif_ecat-import'),
    '#submit' => array(
      'gbif_ecat_import_form_submit'
    ),
    'gbif_ecat' => array(
      '#type' => 'fieldset',
      '#title' => 'GBIF Checklist Bank',
      '#description' => 'Import a classification directly from GBIF Checklist Bank',
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
      'gbif_ecat-status' => array(
        '#weight' => -10,
        '#type' => 'markup',
        '#markup' => $gbif_ecat_service_status ? '<div class="messages status"><h2 class="element-invisible">Status message</h2>The GBIF Checklist Bank service appears to be running.</div>' : '<div class="messages error"><h2 class="element-invisible">Status message</h2>The GBIF Checklist Bank service does not appear to be running.  Please try again later.</div>'
      ),
      'taxonomy_vid' => array(
        '#type' => 'select',
        '#title' => t('Taxonomy'),
        '#options' => $taxonomies,
        '#weight' => -90,
        '#required' => TRUE
      ),
      'gbif_ecat-name' => array(
        '#weight' => -5,
        '#type' => 'textfield',
        '#title' => t('Enter the root term of your classification, e.g. Phthiraptera, Insecta, Aves'),
        '#attributes' => array(
          'onkeypress' => 'if(event.keyCode == 13){return false;}else{return true}'
        )
      ),
      'gbif_ecat-search' => array(
        '#weight' => 0,
        '#type' => 'button',
        '#value' => 'Search GBIF Checklist Bank',
        '#title' => 'Search GBIF Checklist Bank',
        '#disabled' => $gbif_ecat_service_status ? FALSE : TRUE,
        '#ajax' => array(
          'callback' => 'gbif_ecat_classifications_js',
          'event' => 'click',
          'wrapper' => 'gbif_ecat-import-full'
        ),
        '#validate' => array(
          'gbif_ecat_validate'
        )
      ),
      'import-full' => array(
        '#weight' => 5,
        '#markup' => '<div id="gbif_ecat-import-full" style="clear:both"><input name="gbif_ecat-import-id" style="display:none"/></div>'
      ),
      'submit-gbif_ecat' => array(
        '#weight' => 10,
        '#disabled' => $gbif_ecat_service_status ? FALSE : TRUE,
        '#type' => 'submit',
        '#title' => t('Import from GBIF Checklist Bank'),
        '#value' => t('Import from GBIF Checklist Bank'),
        '#submit' => array(
          'gbif_ecat_submit'
        ),
        '#validate' => array(
          'gbif_ecat_validate'
        ),
        '#states' => array(
          'invisible' => array(
            ':input[name="gbif_ecat-import-id"]' => array(
              'value' => ''
            )
          )
        )
      )
    )
  );
}

/**
 * Implements hook_drupal_goto_alter().
 */
function gbif_ecat_drupal_goto_alter(&$path, &$options, &$http_response_code){
  if($path == 'batch'){
    $batch = batch_get();
    if($batch['source_url'] == 'admin/structure/taxonomy/gbif_ecat-import'){
      $options['query']['render'] = 'overlay';
    }
  }
}

/**
 * Importer
 */
function gbif_ecat_batch_importer($id, $vid, &$context){
  if(!isset($context['sandbox']['start_time'])){
    $context['sandbox']['start_time'] = time();
    $context['sandbox']['ids'] = array(
      $id => 0
    );
    $context['sandbox']['imported'] = 0;
    $request = drupal_http_request(GBIF_ECAT_BASE_URL . "usage/$id", array(
      'timeout' => 5
    ));
    if($request->code == 200){
      $record = json_decode(utf8_encode($request->data), TRUE);
      $context['sandbox']['max'] = $record['data']['numDescendants'] + 1;
      $vocabulary = taxonomy_vocabulary_load($vid);
      $context['sandbox']['vid'] = $vid;
      $context['sandbox']['vmn'] = $vocabulary->machine_name;
      $_SESSION['tcsdc_import_vid'] = $vid;
    }
  }
  $keys = array_keys($context['sandbox']['ids']);
  $importable_found = FALSE;
  $attempt = 0;
  $id = array_shift($keys);
  $parent = $context['sandbox']['ids'][$id];
  unset($context['sandbox']['ids'][$id]);
  // Save the record
  $request = drupal_http_request(GBIF_ECAT_BASE_URL . "usage/$id?showVernaculars=en", array(
    'timeout' => 5
  ));
  if($request->code == 200 && ($record = json_decode(utf8_encode($request->data), TRUE)) != FALSE && $record['success'] && count($record['data'])){
    preg_match("/[\(A-Z]/", $record['data']['scientificName'], $matches, 0, 1);
    if(count($matches)){
      $first_cap = strpos($record['data']['scientificName'], $matches[0]);
      $name = trim(substr($record['data']['scientificName'], 0, $first_cap));
      $authority = substr($record['data']['scientificName'], $first_cap);
    }else{
      $name = $record['data']['scientificName'];
      $authority = '';
    }
    $term = array(
      'vid' => $context['sandbox']['vid'],
      'name' => $name,
      'vocabulary_machine_name' => $context['sandbox']['vmn'],
      'description' => t('According to: @according', array(
        '@according' => $record['data']['accordingTo']
      )),
      'parent' => array(
        $parent
      ),
      'field_authors' => array(
        LANGUAGE_NONE => array(
          array(
            'value' => $authority
          )
        )
      ),
      'field_rank' => array(
        LANGUAGE_NONE => array(
          array(
            'value' => ucfirst($record['data']['rank'])
          )
        )
      ),
      'field_usage' => array(
        LANGUAGE_NONE => array(
          array(
            'value' => $record['data']['taxonomicStatus'] == 'accepted' ? 'valid' : 'invalid'
          )
        )
      )
    );
    if($record['data']['taxonomicStatus'] != 'accepted' && $parent){
      $term['field_aan_' . $context['sandbox']['vid']] = array(
        LANGUAGE_NONE => array(
          array(
            'tid' => $parent
          )
        )
      );
    }
    $name_parts = explode(" ", $name);
    $part_index = 1;
    $unit_indicators = itis_term_allowed_values(array(
      'field_name' => 'field_unit_indicator4'
    ));
    foreach($name_parts as $name_part){
      if(isset($unit_indicators[$name_part])){
        $term['field_unit_indicator' . $part_index] = array(
          LANGUAGE_NONE => array(
            array(
              'value' => $name_part
            )
          )
        );
      }else{
        $term['field_unit_name' . $part_index] = array(
          LANGUAGE_NONE => array(
            array(
              'value' => $name_part
            )
          )
        );
        $part_index++;
      }
    }
    $term = (object)$term;
    taxonomy_term_save($term);
    if(!$term->tid){
      $failed_to_save = TRUE;
    }else{
      foreach($record['data']['vernacularNames'] as $language => $name){
        // Save the vernacular names.
        $entity = entity_create('field_collection_item', array(
          'field_name' => 'field_vernacular_name_collection'
        ));
        $entity->field_vernacular_name = array(
          LANGUAGE_NONE => array(
            array(
              'value' => $name
            )
          )
        );
        $entity->field_language = array(
          LANGUAGE_NONE => array(
            array(
              'value' => $language
            )
          )
        );
        $entity->setHostEntity('taxonomy_term', $term, LANGUAGE_NONE, TRUE);
        $term = $entity->hostEntity();
        $entity->save(TRUE);
      }
      taxonomy_term_save($term);
    }
    $context['sandbox']['imported']++;
    // Get the children.
    $request = drupal_http_request(GBIF_ECAT_BASE_URL . "nav/$id", array(
      'timeout' => 5
    ));
    if($request->code == 200 && ($children = json_decode(utf8_encode($request->data))) != FALSE){
      foreach($children['data'] as $child){
        $context['sandbox']['ids'][$child['taxonID']] = $term->tid;
      }
    }
  }else{
    watchdog('gbif_ecat', 'Failed to download/decode: !url', array(
      '!url' => GBIF_ECAT_BASE_URL . "usage/$id?showVernaculars=en"
    ));
  }
  if(count($context['sandbox']['ids'])){
    $context['finished'] = $context['sandbox']['imported'] / $context['sandbox']['max'];
    $time_taken = time() - $context['sandbox']['start_time'];
    $time_remaining = (1 / $context['finished'] * $time_taken) - $time_taken;
    $context['message'] = t('Saved %numnames of %totalnames names in %time (Approx. %time_left until the import is finished)', array(
      '%numnames' => $context['sandbox']['imported'],
      '%totalnames' => $context['sandbox']['max'],
      '%time' => format_interval($time_taken),
      '%time_left' => format_interval($time_remaining)
    ));
  }else{
    $context['finished'] = 1;
  }
}

/**
 * Callback function when pressing "Import from GBIF Checklist Bank"
 */
function gbif_ecat_submit($form, $form_state){
  // Validation doesn't appear to work, so we instead piss people off and
  // do it here.
  if(!isset($form_state['values']['taxonomy_vid']) || !$form_state['values']['taxonomy_vid'] || !isset($form_state['values']['gbif_ecat-import-id']) || !$form_state['values']['gbif_ecat-import-id']){
    drupal_set_message('Please ensure you select a source and destination vocabulary.', 'error');
    drupal_goto('admin/import');
  }
  // Added for D7 to prevent errors on submission/testing.
  $batch = array(
    'operations' => array(
      array(
        'gbif_ecat_batch_importer',
        array(
          $form_state['values']['gbif_ecat-import-id'],
          $form_state['values']['taxonomy_vid']
        )
      )
    ),
    'finished' => 'tcsdc_finished_batch',
    'title' => t('Importing'),
    // We use a single multi-pass operation, so the default
    // 'Remaining x of y operations' message will be confusing here.
    'error_message' => t('The import has encountered an error.')
  );
  // Update the vocabulary to state that we've downloaded from GBIF Checklist Bank.
  $vocabulary = taxonomy_vocabulary_load($form_state['values']['taxonomy_vid']);
  $vocabulary->description = trim($vocabulary->description . ' ' . t('(Imported from GBIF Checklist Bank)'));
  taxonomy_vocabulary_save($vocabulary);
  batch_set($batch);
}

/**
 * Validate the form
 */
function gbif_ecat_validate($form, &$form_state){
  // Lets just check that the gbif_ecat-import-id is set in #post, and that it is
  // numeric (is this likely to change Patrick?).
  if(!isset($form_state['values']['taxonomy_vid']) || !$form_state['values']['taxonomy_vid']){
    form_set_error('taxonomy_vid', t('Please select a vocabulary first.'));
  }
  if(!(isset($form_state['values']['gbif_ecat-import-id']) && count(explode("|", $form_state['values']['gbif_ecat-import-id'])) == 2)){
    form_set_error('gbif_ecat-import-id', t('Please ensure you select a classification to import.'));
  }
}

/**
 * Helper function to convert a nested GBIF Checklist Bank classification to a string.
 */
function _gbif_ecat_de_nest($record){
  return $record->child ? trim($record->scientificname . ' > ' . _gbif_ecat_de_nest($record->child)) : '';
}

/**
 * Sort function for ordering GBIF ECAT results
 */
function _gbif_ecat_sort_records($a, $b){
  return ($a['numDescendants'] > $b['numDescendants']) ? -1 : 1;
}

/**
 * Callback for the ajax
 */
function gbif_ecat_classifications_js($form, $form_state){
  $request = drupal_http_request(GBIF_ECAT_BASE_URL . 'usage/?searchType=canonical&q=' . urlencode($_POST['gbif_ecat-name']), array(
    'timeout' => 5
  ));
  if($request->code == 200 && ($records = json_decode(utf8_encode($request->data), TRUE)) != FALSE){
    uasort($records['data'], '_gbif_ecat_sort_records');
    if($records && count($records['data'])){
      foreach($records['data'] as $record){
        // FIXME - Add the number of children.
        $options[$record['taxonID']] = t('@scientific_name and @num descendants [GBIF ID: @gbif_id] (@source)', array(
          '@scientific_name' => $record['scientificName'],
          '@num' => $record['numDescendants'],
          '@gbif_id' => $record['taxonID'],
          '@source' => $record['datasetName']
        ));
      }
    }
  }
  $form['gbif_ecat']['gbif_ecat-import-id'] = array(
    '#weight' => 5,
    '#name' => 'gbif_ecat-import-id',
    '#type' => 'radios',
    '#title' => t('Import from Classification'),
    '#default_value' => '',
    '#options' => $options,
    '#parents' => array(
      'gbif_ecat-import-id'
    ),
    '#prefix' => '<div id="gbif_ecat-import-full" style="clear:both">',
    '#suffix' => '</div>'
  );
  form_set_cache($form['#build_id'], $form, $form_state);
  // The following few lines of code are clearly not right. I shouldn't have
  // to manually set the '#name' for each 'radio' element within the radios
  // element. Ah well, it works!
  $form_to_return = form_process_radios($form['gbif_ecat']['gbif_ecat-import-id']);
  $children = element_children($form_to_return);
  foreach($children as $key){
    $form_to_return[$key]['#name'] = 'gbif_ecat-import-id';
  }
  $output = drupal_render($form_to_return);
  if(count($options) == 1){
    // Odd bug with #states that seems to stop what I've written above from
    // working.
    // It may well be the case that what I've written shouldn't work, but this
    // is a work around.
    $output .= '<input id="edit-gbif_ecat-import-id-randomgibberish" class="form-radio" type="radio" value="randomgibberish" name="gbif_ecat-import-id" style="display:none;">';
  }
  drupal_get_messages();
  return $output;
}