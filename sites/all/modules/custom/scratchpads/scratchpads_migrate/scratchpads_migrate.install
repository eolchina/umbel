<?php

/**
 * Implements hook_install().
 */
function scratchpads_migrate_install(){
  // Delete all existing terms. We'll just use the old ones
  db_delete('taxonomy_term_data')->execute();
  scratchpads_migrate_update_7001();
}

/**
 * Implements hook_schema().
 */
function scratchpads_migrate_schema(){
  $schema['scratchpads_migrate_task'] = array(
    'description' => 'Scratchpads migrate user tasks.',
    'fields' => array(
      'tid' => array(
        'description' => 'The primary identifier for a task.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'entity' => array(
        'description' => 'The entity type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'entity_id' => array(
        'description' => 'The entity id.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
      'error' => array(
        'description' => 'Error message.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big'
      ),
      'action' => array(
        'description' => 'Follow up action for the user.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big'
      ),
      'status' => array(
        'description' => 'Boolean indicating task status.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1
      )
    ),
    'primary key' => array(
      'tid'
    )
  );
  return $schema;
}

/**
 * Update the fields.
 */
function scratchpads_migrate_update_7001(){
  // We delete the field_collector and field_identified_by fields to be plain
  // text fields.  These will be converted to proper "people" fields at a later
  // date.
  // Exported field: 'node-specimen_observation-field_collector'
  $fields = array(
    array(
      'field_config' => array(
        'active' => '1',
        'cardinality' => '1',
        'deleted' => '0',
        'entity_types' => array(),
        'field_name' => 'field_collector',
        'foreign keys' => array(
          'format' => array(
            'columns' => array(
              'format' => 'format'
            ),
            'table' => 'filter_format'
          )
        ),
        'indexes' => array(
          'format' => array(
            0 => 'format'
          )
        ),
        'module' => 'text',
        'settings' => array(
          'max_length' => '255'
        ),
        'translatable' => '0',
        'type' => 'text'
      ),
      'field_instance' => array(
        'bundle' => 'specimen_observation',
        'default_value' => NULL,
        'deleted' => '0',
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'text',
            'settings' => array(),
            'type' => 'text_default',
            'weight' => '5'
          ),
          'linked_node' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0
          )
        ),
        'entity_type' => 'node',
        'field_name' => 'field_collector',
        'label' => 'Collector',
        'required' => 0,
        'settings' => array(
          'linkit' => array(
            'enable' => 0,
            'insert_plugin' => ''
          ),
          'text_processing' => '0',
          'user_register_form' => FALSE
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'text',
          'settings' => array(
            'size' => '255'
          ),
          'type' => 'text_textfield',
          'weight' => '9'
        )
      )
    ),
    array(
      'field_config' => array(
        'active' => '1',
        'cardinality' => '1',
        'deleted' => '0',
        'entity_types' => array(),
        'field_name' => 'field_identified_by',
        'foreign keys' => array(
          'format' => array(
            'columns' => array(
              'format' => 'format'
            ),
            'table' => 'filter_format'
          )
        ),
        'indexes' => array(
          'format' => array(
            0 => 'format'
          )
        ),
        'module' => 'text',
        'settings' => array(
          'max_length' => '255'
        ),
        'translatable' => '0',
        'type' => 'text'
      ),
      'field_instance' => array(
        'bundle' => 'specimen_observation',
        'default_value' => NULL,
        'deleted' => '0',
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'text',
            'settings' => array(),
            'type' => 'text_default',
            'weight' => '4'
          ),
          'linked_node' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0
          )
        ),
        'entity_type' => 'node',
        'field_name' => 'field_identified_by',
        'label' => 'Identified by',
        'required' => 0,
        'settings' => array(
          'linkit' => array(
            'enable' => 0,
            'insert_plugin' => ''
          ),
          'text_processing' => '0',
          'user_register_form' => FALSE
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'text',
          'settings' => array(
            'size' => '255'
          ),
          'type' => 'text_textfield',
          'weight' => '5'
        )
      )
    )
  );
  foreach($fields as $field){
    field_delete_field($field['field_config']['field_name']);
  }
  field_sync_field_status();
  field_purge_batch(10);
  foreach($fields as $field){
    field_create_field($field['field_config']);
    field_create_instance($field['field_instance']);
  }
}